{
  "openapi": "3.0.1",
  "info": {
    "title": "Sample | schemas-by-ref",
    "version": "1.0.0"
  },
  "paths": {
    "/schemas-by-ref/typed-results": {
      "get": {
        "tags": [
          "Sample"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Triangle"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/multiple-results": {
      "get": {
        "tags": [
          "Sample"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Triangle"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/string"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/iresult-no-produces": {
      "get": {
        "tags": [
          "Sample"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/schemas-by-ref/iresult-with-produces": {
      "get": {
        "tags": [
          "Sample"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Triangle"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/primitives": {
      "get": {
        "tags": [
          "Sample"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID associated with the Todo item.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/int"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The number of Todos to fetch",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/int"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/schemas-by-ref/product": {
      "get": {
        "tags": [
          "Sample"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/account": {
      "get": {
        "tags": [
          "Sample"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/array-of-ints": {
      "post": {
        "tags": [
          "Sample"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArrayOfint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/int"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/list-of-ints": {
      "post": {
        "tags": [
          "Sample"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArrayOfint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/int"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/ienumerable-of-ints": {
      "post": {
        "tags": [
          "Sample"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/int"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/dictionary-of-ints": {
      "get": {
        "tags": [
          "Sample"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictionaryOfstringAndint"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/frozen-dictionary-of-ints": {
      "get": {
        "tags": [
          "Sample"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictionaryOfstringAndint"
                }
              }
            }
          }
        }
      }
    },
    "/schemas-by-ref/shape": {
      "get": {
        "tags": [
          "Sample"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "$type"
                ],
                "type": "object",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ShapeTriangle"
                  },
                  {
                    "$ref": "#/components/schemas/ShapeSquare"
                  }
                ],
                "discriminator": {
                  "propertyName": "$type",
                  "mapping": {
                    "triangle": "#/components/schemas/ShapeTriangle",
                    "square": "#/components/schemas/ShapeSquare"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/schemas-by-ref/weatherforecastbase": {
      "get": {
        "tags": [
          "Sample"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "$type"
                ],
                "type": "object",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/WeatherForecastBaseWeatherForecastWithCity"
                  },
                  {
                    "$ref": "#/components/schemas/WeatherForecastBaseWeatherForecastWithTimeSeries"
                  },
                  {
                    "$ref": "#/components/schemas/WeatherForecastBaseWeatherForecastWithLocalNews"
                  }
                ],
                "discriminator": {
                  "propertyName": "$type",
                  "mapping": {
                    "0": "#/components/schemas/WeatherForecastBaseWeatherForecastWithCity",
                    "1": "#/components/schemas/WeatherForecastBaseWeatherForecastWithTimeSeries",
                    "2": "#/components/schemas/WeatherForecastBaseWeatherForecastWithLocalNews"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/schemas-by-ref/person": {
      "get": {
        "tags": [
          "Sample"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "discriminator"
                ],
                "type": "object",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/PersonStudent"
                  },
                  {
                    "$ref": "#/components/schemas/PersonTeacher"
                  }
                ],
                "discriminator": {
                  "propertyName": "discriminator",
                  "mapping": {
                    "student": "#/components/schemas/PersonStudent",
                    "teacher": "#/components/schemas/PersonTeacher"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/int"
          },
          "name": {
            "$ref": "#/components/schemas/string"
          }
        }
      },
      "ArrayOfint": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/int"
        }
      },
      "DictionaryOfstringAndint": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/int"
        }
      },
      "double": {
        "type": "number",
        "format": "double"
      },
      "int": {
        "type": "integer",
        "format": "int32"
      },
      "PersonStudent": {
        "properties": {
          "discriminator": {
            "enum": [
              "student"
            ],
            "type": "string"
          },
          "gpa": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "PersonTeacher": {
        "required": [
          "subject"
        ],
        "properties": {
          "discriminator": {
            "enum": [
              "teacher"
            ],
            "type": "string"
          },
          "subject": {
            "$ref": "#/components/schemas/string"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/int"
          },
          "name": {
            "$ref": "#/components/schemas/string"
          }
        }
      },
      "ShapeSquare": {
        "properties": {
          "$type": {
            "enum": [
              "square"
            ],
            "type": "string"
          },
          "area": {
            "$ref": "#/components/schemas/double"
          },
          "color": {
            "$ref": "#/components/schemas/string"
          },
          "sides": {
            "$ref": "#/components/schemas/int"
          }
        }
      },
      "ShapeTriangle": {
        "properties": {
          "$type": {
            "enum": [
              "triangle"
            ],
            "type": "string"
          },
          "hypotenuse": {
            "$ref": "#/components/schemas/double"
          },
          "color": {
            "$ref": "#/components/schemas/string"
          },
          "sides": {
            "$ref": "#/components/schemas/int"
          }
        }
      },
      "string": {
        "type": "string"
      },
      "Triangle": {
        "type": "object",
        "properties": {
          "hypotenuse": {
            "$ref": "#/components/schemas/double"
          },
          "color": {
            "$ref": "#/components/schemas/string"
          },
          "sides": {
            "$ref": "#/components/schemas/int"
          }
        }
      },
      "WeatherForecastBaseWeatherForecastWithCity": {
        "required": [
          "city"
        ],
        "properties": {
          "$type": {
            "enum": [
              0
            ],
            "type": "integer"
          },
          "city": {
            "$ref": "#/components/schemas/string"
          }
        }
      },
      "WeatherForecastBaseWeatherForecastWithLocalNews": {
        "required": [
          "news"
        ],
        "properties": {
          "$type": {
            "enum": [
              2
            ],
            "type": "integer"
          },
          "news": {
            "$ref": "#/components/schemas/string"
          }
        }
      },
      "WeatherForecastBaseWeatherForecastWithTimeSeries": {
        "required": [
          "summary"
        ],
        "properties": {
          "$type": {
            "enum": [
              1
            ],
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "temperatureC": {
            "$ref": "#/components/schemas/int"
          },
          "summary": {
            "$ref": "#/components/schemas/string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Sample"
    }
  ]
}